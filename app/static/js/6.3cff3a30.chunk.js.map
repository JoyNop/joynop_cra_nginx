{"version":3,"sources":["todolist/todoList.tsx","todolist/service/todoAction.ts","todolist/todoControl.tsx","todolist/todoPage.tsx"],"names":["TodoList","console","log","this","props","state","removeItem","size","bordered","loading","todo","isLoading","dataSource","todolist","renderItem","item","index","Item","title","onClick","getTodoList","React","Component","connect","dispatch","a","async","type","ETodoTypes","TODO_FETCH_LOADING","axios","get","res","TODO_FETCH_SUCCESS","payload","data","TODO_FETCH_ERROR","todos","splice","TODO_REMOVE_ITEM","error","TodoControl","addItem","refreshTodo","userId","Math","random","id","completed","unshift","TODO_ADD_ITEM","TodoPage"],"mappings":"qRAYMA,E,iLAEFC,QAAQC,IAAIC,KAAKC,OADV,MAGuBD,KAAKC,MAA3BC,EAHD,EAGCA,MAAOC,EAHR,EAGQA,WACf,OACE,6BACE,uBACEC,KAAK,QACLC,UAAQ,EACRC,QAASJ,EAAMK,KAAKC,UACpBC,WAAYP,EAAMK,KAAKG,SACvBC,WAAY,SAACC,EAAMC,GAAP,OACV,sBAAMC,KAAN,KACGF,EAAKG,MACN,uBAAQC,QAAS,kBAAMb,EAAWD,EAAMK,KAAKG,SAAUG,KAAvD,uB,0CAUVb,KAAKC,MAAMgB,kB,GAzBQC,IAAMC,WAsCdC,eATS,SAAClB,GAAD,MAAsB,CAC5CA,YAGyB,SAACmB,GAAD,MAAoB,CAC7CJ,YAAa,kBAAMI,GCxCY,SAAOA,GAAP,eAAAC,EAAAC,OAAA,uDAC/BF,EAAS,CAAEG,KAAMC,IAAWC,qBADG,oBAAAJ,EAAA,MAGXK,IAAMC,IAAN,8CAHW,OAGvBC,EAHuB,OAI7BR,EAAS,CAAEG,KAAMC,IAAWK,mBAAoBC,QAASF,EAAIG,OAJhC,gDAM7BX,EAAS,CAAEG,KAAMC,IAAWQ,mBANC,4DDyC/B9B,WAAY,SAAC+B,EAAmBrB,GAApB,OACVQ,EChCsB,SAACa,EAAmBrB,GAApB,OAAsC,SAC9DQ,GAEAA,EAAS,CAAEG,KAAMC,IAAWC,qBAC5B,IACEQ,EAAMC,OAAOtB,EAAO,GACpBQ,EAAS,CAAEG,KAAMC,IAAWW,iBAAkBL,QAASG,IACvD,MAAOG,GACPhB,EAAS,CAAEG,KAAMC,IAAWQ,qBDwBnB9B,CAAW+B,EAAOrB,QAEhBO,CAA6CvB,GEvCtDyC,E,iLACM,IAAD,EACiCtC,KAAKC,MAArCsC,EADD,EACCA,QAASrC,EADV,EACUA,MAAOsC,EADjB,EACiBA,YACxB,OACE,6BACE,uBAAQxB,QAASwB,GAAjB,gBACA,uBAAQxB,QAAS,kBAAMuB,EAAQrC,EAAMK,KAAKG,YAA1C,iC,GANkBS,aAoBXC,eARS,SAAClB,GAAD,MAAsB,CAC5CA,YAGyB,SAACmB,GAAD,MAAoB,CAC7CkB,QAAS,SAACL,GAAD,OAAuBb,EDDX,SAACa,GAAD,OAAuB,SAC5Cb,GAEAA,EAAS,CAAEG,KAAMC,IAAWC,qBAC5B,IACE,IAAId,EAAO,CACT6B,OAAQC,KAAKC,SACbC,GAAIF,KAAKC,SACT5B,MAAM,SAAD,OAAW2B,KAAKC,UACrBE,WAAW,GAEbX,EAAMY,QAAQlC,GACdS,EAAS,CAAEG,KAAMC,IAAWsB,cAAehB,QAASG,IACpD,MAAOG,GACPhB,EAAS,CAAEG,KAAMC,IAAWQ,qBCbWM,CAAQL,KACjDM,YAAa,kBAAMnB,GDgBY,SAAOA,GAAP,eAAAC,EAAAC,OAAA,uDAC/BF,EAAS,CAAEG,KAAMC,IAAWC,qBADG,oBAAAJ,EAAA,MAGXK,IAAMC,IAAN,8CAHW,OAGvBC,EAHuB,OAI7BR,EAAS,CAAEG,KAAMC,IAAWK,mBAAoBC,QAASF,EAAIG,OAJhC,gDAM7BX,EAAS,CAAEG,KAAMC,IAAWQ,mBANC,+DCdlBb,CAA6CkB,G,4CC5BvCU,E,iLAEjB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAL8B9B,IAAMC","file":"static/js/6.3cff3a30.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { List, Button } from \"antd\";\nimport { getTodoList, removeItem } from \"./service/todoAction\";\nimport { AppState } from \"../store\";\n\ninterface ITodoProps {\n  state: AppState;\n  getTodoList: () => void;\n  removeItem: (todos: Array<any>, index: number) => void;\n}\n\nclass TodoList extends React.Component<ITodoProps> {\n  render() {\n    console.log(this.props);\n\n    const { state, removeItem } = this.props;\n    return (\n      <div>\n        <List\n          size=\"small\"\n          bordered\n          loading={state.todo.isLoading}\n          dataSource={state.todo.todolist}\n          renderItem={(item, index) => (\n            <List.Item>\n              {item.title}\n              <Button onClick={() => removeItem(state.todo.todolist, index)}>\n                删除\n              </Button>\n            </List.Item>\n          )}\n        />\n      </div>\n    );\n  }\n  componentDidMount() {\n    this.props.getTodoList();\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  state\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  getTodoList: () => dispatch(getTodoList()),\n  removeItem: (todos: Array<any>, index: number) =>\n    dispatch(removeItem(todos, index))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import { Dispatch } from \"redux\";\nimport axios from \"../../utils/http\";\nimport { ETodoTypes } from \"../../store/types\";\n\nimport { IInitialState } from \"../../store/types\";\n\nexport const getTodoList = () => async (dispatch: Dispatch<IInitialState>) => {\n  dispatch({ type: ETodoTypes.TODO_FETCH_LOADING });\n  try {\n    const res = await axios.get(`http://jsonplaceholder.typicode.com/todos`);\n    dispatch({ type: ETodoTypes.TODO_FETCH_SUCCESS, payload: res.data });\n  } catch (error) {\n    dispatch({ type: ETodoTypes.TODO_FETCH_ERROR });\n  }\n};\n\nexport const removeItem = (todos: Array<any>, index: number) => (\n  dispatch: Dispatch<IInitialState>\n) => {\n  dispatch({ type: ETodoTypes.TODO_FETCH_LOADING });\n  try {\n    todos.splice(index, 1);\n    dispatch({ type: ETodoTypes.TODO_REMOVE_ITEM, payload: todos });\n  } catch (error) {\n    dispatch({ type: ETodoTypes.TODO_FETCH_ERROR });\n  }\n};\nexport const addItem = (todos: Array<any>) => (\n  dispatch: Dispatch<IInitialState>\n) => {\n  dispatch({ type: ETodoTypes.TODO_FETCH_LOADING });\n  try {\n    let item = {\n      userId: Math.random(),\n      id: Math.random(),\n      title: `Title:${Math.random()}`,\n      completed: false\n    };\n    todos.unshift(item);\n    dispatch({ type: ETodoTypes.TODO_ADD_ITEM, payload: todos });\n  } catch (error) {\n    dispatch({ type: ETodoTypes.TODO_FETCH_ERROR });\n  }\n};\n\nexport const refreshTodo = () => async (dispatch: Dispatch<IInitialState>) => {\n  dispatch({ type: ETodoTypes.TODO_FETCH_LOADING });\n  try {\n    const res = await axios.get(`http://jsonplaceholder.typicode.com/todos`);\n    dispatch({ type: ETodoTypes.TODO_FETCH_SUCCESS, payload: res.data });\n  } catch (error) {\n    dispatch({ type: ETodoTypes.TODO_FETCH_ERROR });\n  }\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { addItem, refreshTodo } from \"./service/todoAction\";\nimport { Button } from \"antd\";\n\ninterface ITodoControlProps {\n  state: AppState;\n  refreshTodo: () => void;\n  addItem: (todos: Array<any>) => void;\n}\nclass TodoControl extends Component<ITodoControlProps> {\n  render() {\n    const { addItem, state, refreshTodo } = this.props;\n    return (\n      <div>\n        <Button onClick={refreshTodo}>刷新</Button>\n        <Button onClick={() => addItem(state.todo.todolist)}>随机添加</Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  state\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  addItem: (todos: Array<any>) => dispatch(addItem(todos)),\n  refreshTodo: () => dispatch(refreshTodo())\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoControl);\n","import React from \"react\";\nimport TodoList from \"./todoList\";\nimport TodoControl from \"./todoControl\";\nexport default class TodoPage extends React.Component {\n  render() {\n    return (\n      <div>\n        <TodoControl />\n        <TodoList />\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = (state: any) => ({\n//   ...state\n// });\n\n// const mapDispatchToProps = {};\n// export default connect(mapStateToProps, mapDispatchToProps)(TodoPage);\n"],"sourceRoot":""}